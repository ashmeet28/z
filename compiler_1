u8 c

u32 ul_0 ul_1 ul_3 ul_4

u32 l p_c

# Temporary values
u32 t_a t_b t_c

# Saved values
u32 s_a s_b

u32 return_value

# Main heap pointer
u32 p_heap

# Main stack pointer
u32 p_stack

u32 p_source
u32 source_length

start:
    ul_0 = 0x0
    ul_1 = 0x1
    ul_3 = 0x3
    ul_4 = 0x4

    p_stack = 0x81_ff_ff_ff
    p_heap = 0x81_00_00_00
    p_source = 0x82_00_00_00

    # Move source to heap
    s_a = p_source
    goto get_string_length
    source_length = return_value

    s_a = source_length
    goto heap_allocate
    s_a = return_value
    s_b = p_source
    s_c = source_length
    goto copy_bytes
    p_source = s_a
    ecall

# (string_pointer)
get_string_length:
    stack_push

        return_value = 0x0
        c = *s_a
        while c != ul_0
            s_a = s_a + ul_1
            c = *s_a
            return_value = return_value + ul_1
        endwhile

    stack_pop

    return

# (destination, source, size)    
copy_bytes:
    stack_push

    while s_c != ul_0
        c = *s_b
        *s_a = c
        s_a = s_a + ul_1
        s_b = s_b + ul_1
        s_c = s_c - ul_1
    endwhile

    stack_pop

    return

stack_push:
    *p_stack = s_a
    p_stack = p_stack - ul_4

    *p_stack = s_b
    p_stack = p_stack - ul_4

    return

stack_pop:
    s_b = *p_stack
    p_stack = p_stack + ul_4

    s_a = *p_stack
    p_stack = p_stack + ul_4

    return

# (size)
heap_allocate:
    return_value = p_heap
    p_heap = p_heap + s_a

    # Align heap pointer
    t_a = p_heap & ul_3
    if t_a != ul_0
        p_heap = p_heap + ul_4
        t_a = 0xff_ff_ff_fc
        p_heap = p_heap & t_a
    endif

    return

